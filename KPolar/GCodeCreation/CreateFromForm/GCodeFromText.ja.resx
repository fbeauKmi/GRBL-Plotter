<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="label11.Text" xml:space="preserve">
    <value>ライン距離</value>
  </data>
  <data name="label3.Text" xml:space="preserve">
    <value>ツール：</value>
  </data>
  <data name="label10.Text" xml:space="preserve">
    <value>文字距離</value>
  </data>
  <data name="cBPauseWord.Text" xml:space="preserve">
    <value>単語の前に一時停止を追加します。</value>
  </data>
  <data name="btnApply.Text" xml:space="preserve">
    <value>Gコードを作成します。</value>
  </data>
  <data name="cBPauseLine.Text" xml:space="preserve">
    <value>行の前に一時停止を追加します。</value>
  </data>
  <data name="$this.Text" xml:space="preserve">
    <value>テキストからGコードを作成</value>
  </data>
  <data name="label2.Text" xml:space="preserve">
    <value>セットアップSVG-Importの他のGコード設定</value>
  </data>
  <data name="label11.ToolTip" xml:space="preserve">
    <value>ライン間の距離</value>
  </data>
  <data name="btnCancel.Text" xml:space="preserve">
    <value>閉じる</value>
  </data>
  <data name="cBConnectLetter.Text" xml:space="preserve">
    <value>接続文字（ハーシーのみ）</value>
  </data>
  <data name="cBToolTable.ToolTip" xml:space="preserve">
    <value>単語内で、文字の最後のポイントを次の文字の最初のポイントに接続します</value>
  </data>
  <data name="label1.Text" xml:space="preserve">
    <value>文字の高さ</value>
  </data>
  <data name="cBPauseChar.Text" xml:space="preserve">
    <value>手紙の前に一時停止を追加</value>
  </data>
  <data name="groupBox1.Text" xml:space="preserve">
    <value>Gコード</value>
  </data>
  <data name="cBConnectLetter.ToolTip" xml:space="preserve">
    <value>単語内で、文字の最後のポイントを次の文字の最初のポイントに接続します</value>
  </data>
  <data name="label1.ToolTip" xml:space="preserve">
    <value>文字の高さ</value>
  </data>
  <data name="cBToolTable.Text" xml:space="preserve">
    <value>ツールテーブルから値を取得する</value>
  </data>
  <data name="label10.ToolTip" xml:space="preserve">
    <value>文字間の追加スペース</value>
  </data>
  <data name="tabPage1.Text" xml:space="preserve">
    <value>テキストの作成</value>
  </data>
  <data name="tabPage2.Text" xml:space="preserve">
    <value>フォント情報</value>
  </data>
  <data name="cBLineBreak.Text" xml:space="preserve">
    <value>後の改行（推定）</value>
  </data>
  <data name="cBLineBreak.ToolTip" xml:space="preserve">
    <value>語長を推定し、指定された長さの後に改行を追加します</value>
  </data>
  <data name="RbAlign3.Text" xml:space="preserve">
    <value>右の方へ</value>
  </data>
  <data name="RbAlign2.Text" xml:space="preserve">
    <value>中心</value>
  </data>
  <data name="RbAlign1.Text" xml:space="preserve">
    <value>左</value>
  </data>
  <data name="CbInsertCode.Text" xml:space="preserve">
    <value>テキストを2Dビューに挿入します（位置0; 0）</value>
  </data>
  <data name="CbOutline.Text" xml:space="preserve">
    <value>概要</value>
  </data>
  <data name="CbOutline.ToolTip" xml:space="preserve">
    <value>[設定 - グラフィックのインポート - パスのインポート - パスの変更] で定義されたハッチ塗りつぶしパターンで文字を塗りつぶします。</value>
  </data>
  <data name="CbHatchFill.Text" xml:space="preserve">
    <value>ハッチ塗りつぶし</value>
  </data>
  <data name="CbHatchFill.ToolTip" xml:space="preserve">
    <value>[設定 - グラフィックのインポート - パスのインポート - パスの変更] で定義されたハッチ塗りつぶしパターンで文字を塗りつぶします。</value>
  </data>
  <data name="CbWordWrap.Text" xml:space="preserve">
    <value>ワードラップ</value>
  </data>
  <data name="RbFont2.Text" xml:space="preserve">
    <value>システムフォント</value>
  </data>
  <data name="RbFont1.Text" xml:space="preserve">
    <value>単線フォント (ハーシー)</value>
  </data>
  <data name="groupBox2.Text" xml:space="preserve">
    <value>テキストの配置</value>
  </data>
  <data name="BtnSelectFont.Text" xml:space="preserve">
    <value>フォントを選択</value>
  </data>
  <data name="LblFont.Text" xml:space="preserve">
    <value>フォント：</value>
  </data>
  <data name="LblInfoFont.Text" xml:space="preserve">
    <value>フォント</value>
  </data>
  <data name="LblInfoSize.Text" xml:space="preserve">
    <value>サイズ</value>
  </data>
  <data name="LblSize.Text" xml:space="preserve">
    <value>サイズ：</value>
  </data>
  <data name="LblWidth.Text" xml:space="preserve">
    <value>幅：</value>
  </data>
  <data name="LblHeight.Text" xml:space="preserve">
    <value>身長：</value>
  </data>
  <data name="LblInfoWidth.Text" xml:space="preserve">
    <value>10000.00</value>
  </data>
  <data name="LblInfoWidth.ToolTip" xml:space="preserve">
    <value>現在のフォントサイズとワードラップ設定で作成された G コードのテキスト幅</value>
  </data>
  <data name="LblInfoHeight.Text" xml:space="preserve">
    <value>10000.00</value>
  </data>
  <data name="LblInfoHeight.ToolTip" xml:space="preserve">
    <value>現在のフォントサイズとワードラップ設定で作成された G コードのテキストの高さ</value>
  </data>
  <data name="linkLabel1.Text" xml:space="preserve">
    <value>フリーフォント</value>
  </data>
  <data name="linkLabel1.ToolTip" xml:space="preserve">
    <value>「www.dafont.com」へのリンク - 使用は自己責任で行ってください。</value>
  </data>
  <data name="NUDWidth.ToolTip" xml:space="preserve">
    <value>目的のテキスト幅を設定し、それに達するように font-size を調整します。</value>
  </data>
  <data name="NUDHeight.ToolTip" xml:space="preserve">
    <value>目的のテキストの高さを設定し、それに達するように font-size を調整します。</value>
  </data>
  <data name="BtnSetWidth.Text" xml:space="preserve">
    <value>セットする</value>
  </data>
  <data name="BtnSetWidth.ToolTip" xml:space="preserve">
    <value>指定されたテキスト幅に達するように font-size を計算して設定します</value>
  </data>
  <data name="BtnSetHeight.Text" xml:space="preserve">
    <value>セットする</value>
  </data>
  <data name="BtnSetHeight.ToolTip" xml:space="preserve">
    <value>指定されたテキストの高さに達するように font-size を計算して設定します</value>
  </data>
  <data name="BtnSaveIni.ToolTip" xml:space="preserve">
    <value>このウィンドウの設定をINIファイルとして保存します</value>
  </data>
  <data name="BtnHelp.ToolTip" xml:space="preserve">
    <value>オンラインヘルプ</value>
  </data>
  <data name="cBImportGraphicNoise.Text" xml:space="preserve">
    <value>ノイズを追加</value>
  </data>
  <data name="cBImportGraphicNoise.ToolTip" xml:space="preserve">
    <value>線のぐらつきの発生 [セットアップ - グラフィックスインポート - パスインポート - パス修正] の設定</value>
  </data>
</root>