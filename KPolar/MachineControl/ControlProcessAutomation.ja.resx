<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BtnStart.Text" xml:space="preserve">
    <value>始める</value>
  </data>
  <data name="BtnStop.Text" xml:space="preserve">
    <value>停止・確認</value>
  </data>
  <data name="label1.Text" xml:space="preserve">
    <value>繰り返し:</value>
  </data>
  <data name="textBox1.Text" xml:space="preserve">
    <value>この形式で XML ファイルを作成してロードします。</value>
  </data>
  <data name="BtnLoad.Text" xml:space="preserve">
    <value>スクリプトをロード</value>
  </data>
  <data name="label3.Text" xml:space="preserve">
    <value>ロード済み:</value>
  </data>
  <data name="LblLoaded.Text" xml:space="preserve">
    <value>なし</value>
  </data>
  <data name="checkBox1.Text" xml:space="preserve">
    <value>プログラムの開始時にこのダイアログを表示する</value>
  </data>
  <data name="$this.Text" xml:space="preserve">
    <value>プロセスの自動化</value>
  </data>
  <data name="deleteRowToolStripMenuItem.Text" xml:space="preserve">
    <value>行の削除</value>
  </data>
  <data name="moveRowUpToolStripMenuItem.Text" xml:space="preserve">
    <value>行を上に移動</value>
  </data>
  <data name="moveRowDownToolStripMenuItem.Text" xml:space="preserve">
    <value>行を下に移動</value>
  </data>
  <data name="TbProcessInfo.Text" xml:space="preserve">
    <value>この形式で XML ファイルを作成し、ロードします。</value>
  </data>
  <data name="BtnSaveIni.ToolTip" xml:space="preserve">
    <value>このウィンドウの設定をINIファイルとして保存します</value>
  </data>
  <data name="BtnHelp.ToolTip" xml:space="preserve">
    <value>オンラインヘルプ</value>
  </data>
  <data name="label7.Text" xml:space="preserve">
    <value>塗りつぶし文字</value>
  </data>
  <data name="label6.Text" xml:space="preserve">
    <value>桁数</value>
  </data>
  <data name="label5.Text" xml:space="preserve">
    <value>結果：</value>
  </data>
  <data name="GbCounter.Text" xml:space="preserve">
    <value>カウンター</value>
  </data>
  <data name="ComboDelimiter.Items" xml:space="preserve">
    <value>;セミコロン</value>
  </data>
  <data name="ComboDelimiter.Items1" xml:space="preserve">
    <value>: コロン</value>
  </data>
  <data name="ComboDelimiter.Items2" xml:space="preserve">
    <value>、コロン</value>
  </data>
  <data name="ComboDelimiter.Items3" xml:space="preserve">
    <value>|</value>
  </data>
  <data name="ComboDelimiter.Items4" xml:space="preserve">
    <value>\t タブ</value>
  </data>
  <data name="ComboDelimiter.ToolTip" xml:space="preserve">
    <value>データ列を区切るための区切り文字を設定します</value>
  </data>
  <data name="LblDataLoaded.Text" xml:space="preserve">
    <value>何もない</value>
  </data>
  <data name="BtnLoadData.Text" xml:space="preserve">
    <value>データを読み込む</value>
  </data>
  <data name="label4.Text" xml:space="preserve">
    <value>データインデックス</value>
  </data>
  <data name="BtnDataIndexClear.Text" xml:space="preserve">
    <value>クリア</value>
  </data>
  <data name="GbData.Text" xml:space="preserve">
    <value>データ</value>
  </data>
  <data name="BtnNew.Text" xml:space="preserve">
    <value>新しい</value>
  </data>
  <data name="BtnSave.Text" xml:space="preserve">
    <value>スクリプトの保存</value>
  </data>
  <data name="LblInfo.Text" xml:space="preserve">
    <value>スクリプトがロードされていません</value>
  </data>
  <data name="label2.Text" xml:space="preserve">
    <value>ポーリングのタイマー間隔 (ミリ秒)</value>
  </data>
</root>